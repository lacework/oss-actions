on: 
  workflow_call:
    inputs:
      min-version:
        type: string
        description: "Minimum Terraform Version Supported by Module"
        default: 1.0

jobs:
  # Construct a set of terraform version numbers to test against
  # Do not add any versions less the the minumum version defined in the workflow input
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      version-list: ${{ toJSON(steps.*.outputs.version) }}
    steps:
      - name: Install tfenv
        shell: bash
        run: |
          git clone --depth=1 https://github.com/tfutils/tfenv.git tfenv

      - name: Output Min Version to Logs
        shell: bash
        run: |
            echo "Minimum version is ${{ inputs.min-version }}"

      - name: TerraformLatest-3
        id: tfl-3
        shell: bash
        run: |
          VERSION=$(tfenv/bin/tfenv list-remote | grep '1\.[0-9]\.0$' | sed -n '4p')
          echo $VERSION
          if [ "${{inputs.min-version}}" = "`echo -e "${{inputs.min-version}}\n${VERSION}" | sort -V | head -n1`" ]; then
            echo "Adding ${VERSION} to job matrix."
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Skipping ${VERSION}, it is too low for this module"
          fi

      - name: TerraformLatest-2
        id: tfl-2
        shell: bash
        run: |
          VERSION=$(tfenv/bin/tfenv list-remote | grep '1\.[0-9]\.0$' | sed -n '3p')
          echo $VERSION
          if [ "${{inputs.min-version}}" = "`echo -e "${{inputs.min-version}}\n${VERSION}" | sort -V | head -n1`" ]; then
            echo "Adding ${VERSION} to job matrix."
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Skipping ${VERSION}, it is too low for this module"
          fi

      - name: TerraformLatest-1
        id: tfl-1
        shell: bash
        run: |
          VERSION=$(tfenv/bin/tfenv list-remote | grep '1\.[0-9]\.0$' | sed -n '2p')
          echo $VERSION
          if [ "${{inputs.min-version}}" = "`echo -e "${{inputs.min-version}}\n${VERSION}" | sort -V | head -n1`" ]; then
            echo "Adding ${VERSION} to job matrix."
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Skipping ${VERSION}, it is too low for this module"
          fi

      - name: TerraformLatestMajor1
        id: tflm-0
        shell: bash
        run: |
          VERSION=$(tfenv/bin/tfenv list-remote | grep '1\.[0-9]\.0$' | sed -n '1p')
          echo $VERSION
          if [ "${{inputs.min-version}}" = "`echo -e "${{inputs.min-version}}\n${VERSION}" | sort -V | head -n1`" ]; then
            echo "Adding ${VERSION} to job matrix."
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Skipping ${VERSION}, it is too low for this module"
          fi

      - name: TerraformLatest1
        id: tflatest
        shell: bash
        run: |
          VERSION=$(tfenv/bin/tfenv list-remote | grep '1\.[0-9]\.[0-9]' | grep -v beta | grep -v alpha | grep -v rc| head -1)
          echo $VERSION
          if [ "${{inputs.min-version}}" = "`echo -e "${{inputs.min-version}}\n${VERSION}" | sort -V | head -n1`" ]; then
            echo "Adding ${VERSION} to job matrix."
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Skipping ${VERSION}, it is too low for this module"
          fi

  run-tests:
    # Test the module against the list of terraform versions constructed in the "get-versions" job
    needs: get-versions
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.get-versions.outputs.version-list) }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::249446771485:role/tf-role-arc-generic
          aws-region: us-west-2

      - name: Install Lacework CLI
        shell: bash
        run: |
          curl https://raw.githubusercontent.com/lacework/go-sdk/main/cli/install.sh | bash
          lacework version
          jq -n \
          --arg ac "$LW_ACCOUNT" \
          --arg ke "$LW_API_KEY" \
          --arg se "$LW_API_SECRET" \
          --arg su "$LW_SUBACCOUNT" \
          '{keyId: $ke, secret: $se, subAccount: $su, account: ($ac + ".lacework.net")}' > creds.json
          lacework configure -j creds.json --noninteractive 
        env:
          LW_ACCOUNT: ${{ secrets.tf_lw_account }}
          LW_API_KEY: ${{ secrets.tf_lw_api_key }}
          LW_API_SECRET: ${{ secrets.tf_lw_api_secret }}
          LW_SUBACCOUNT: ${{ secrets.tf_lw_subaccount }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.version }}
          terraform_wrapper: false

      - name: Install tfsec
        shell: bash
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          tfsec --version

      - name: Test Terraform
        shell: bash
        run: |
          terraform version
          ./scripts/ci_tests.sh
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.tf_arm_subscription_id }}
          ARM_TENANT_ID: ${{ secrets.tf_arm_tenant_id }}
          ARM_CLIENT_ID: ${{ secrets.tf_arm_client_id }}
          ARM_CLIENT_SECRET: ${{ secrets.tf_arm_client_secret }}
          GOOGLE_PROJECT: ${{ secrets.tf_google_project }}
          GOOGLE_CREDENTIALS: ${{ secrets.tf_google_credentials }}
          OCI_PRIVATE_KEY: ${{ secrets.tf_oci_private_key }}
          TF_VAR_tenancy_ocid: ${{ secrets.tf_oci_id }}
          TF_VAR_fingerprint: ${{ secrets.tf_oci_fingerprint }}
          TF_VAR_user_ocid: ${{ secrets.tf_oci_user }}
          TF_VAR_region: ${{ secrets.tf_oci_region }}

  trigger-release:
    if: github.ref == 'refs/heads/main'
    needs: [get-versions, run-tests]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.TF_TOKEN }}
    
    - name: Trigger release
      shell: bash
      run: |
        echo "$GPG_SECRET_KEY" | base64 --decode | gpg --import --no-tty --batch --yes
        scripts/release.sh trigger
      env:
        GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
        GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
        GITHUB_TOKEN: ${{ secrets.TF_TOKEN }}

  slack-notify:
    name: Slack Notify if Failed Tests
    needs: [get-versions, run-tests, trigger-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack on Failure
        if: ${{ contains(needs.*.result, 'failure') }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "#E92020",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "@oncall-growth-eng! There has been a failure that needs your attention. :rotating_light:\n*GitHub Workflow Failure <${{ github.server_url }}/${{ github.repository }}>*\n\n*Workflow Run*\n <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.TF_SLACK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
